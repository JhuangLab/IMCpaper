block_anno = rowAnnotation(Type = anno_block(gp = gpar(fill = meta_colors),
labels = labels_meta,
labels_gp = gpar(col = "white", fontsize = 10)))
col_fun = circlize::colorRamp2(c(-1, 0, 1, 2, 3), c("#5658A5", "#8BCDA3", "#FBF4AA", "#F16943", "#9D1A44"))
prop_data <- cluster_prop[ ,3]
names(prop_data) <- cluster_prop[ ,1]
# bar annotation
meta_all1 <- meta_all %>% mutate(base_excision_eval = case_when(
nchar(base_excision_eval) == 4 ~ "BRPC_LAPC",
TRUE ~ base_excision_eval))
coldat <- left_join(coldat, meta_all1[, c("sample_id", "base_excision_eval")])
group_dat <- coldat %>% group_by(cell_type_new) %>%
mutate(allcount = n()) %>%
group_by(cell_type_new, base_excision_eval, allcount) %>%
summarise(count = n()) %>%
na.omit() %>% mutate(frac = count / allcount)
group_dat$cell_type_order <- factor(group_dat$cell_type_new,
levels = rev(grouping_celltype$cell_type_new))
prop_data <- prop_data[match(rownames(heatmap_dat), names(prop_data))]
cell_amount_anno = ComplexHeatmap::rowAnnotation(
frac = anno_barplot(prop_data,
gp = gpar(fill = ctype10_cols[match(rownames(heatmap_dat), names(ctype10_cols))])))
text_color <- scales::muted(ctype10_cols[match(rev(grouping_celltype$cell_type_new), names(ctype10_cols))], l = 50)
# bubble plot
group_dat$base_order <- factor(group_dat$base_excision_eval,
levels = c("RPC", "BRPC_LAPC", "MPC"))
pcirc <- ggplot(group_dat, aes(y = cell_type_order, x = base_order)) +
geom_point(aes(color = cell_type_order, alpha = frac, size = count)) +
scale_color_manual(values = ctype10_cols) +
scale_size(range = c(1, 15), name = "Fraction of clinical in celltype group") +
theme(
axis.text.y = element_text(color = text_color),
# not officially supported but works anyway, one may also seek for ggtext solution
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
legend.position = "none",
axis.title.x = element_blank(),
axis.title.y = element_blank()
) +
expand_limits(y = c(1, length(levels(group_dat$cell_type_order)) + 0.8))
# main heatmap
ht_main <- Heatmap(heatmap_dat, name = "matrix", heatmap_legend_param = list(title = "exp"),
cluster_row_slices = F, col = col_fun, row_km = 0,
cluster_rows = F, show_heatmap_legend = F, left_annotation = block_anno,
split = split_row, show_row_names = F, row_title = NULL,
show_row_dend = F, show_column_dend = F)
ht <- attach_annotation(ht_main, cell_amount_anno, side = "right")
ht <- draw(ht)
grob <- grid.grabExpr(draw(ht))
# legends
heat_legend <- Legend(title = "Intensity", at = -1:3, col_fun = col_fun)
meta_legend <- Legend(labels = labels_meta2, title = "Cell Categories",
legend_gp = gpar(fill = meta_colors))
merged_legends <- packLegend(heat_legend, meta_legend)
# merged plot
p <- ggdraw() +
draw_plot(pcirc, 0, 0.033, 0.27, 0.95) +   ## x, y, width, height
draw_plot(grob, 0.275, 0.001, 0.52, 0.98) +
draw_plot(grid.grabExpr(draw(merged_legends)), 0.84, 0.4, 0.06, 0.08)
ggsave(glue::glue("{res_dir}/fig1d_heatmap_main_anno.pdf"), p, height = 7, width = 13)
p
ht <- draw(ht)
grob <- grid.grabExpr(draw(ht))
# merged plot
p <- ggdraw() +
draw_plot(pcirc, 0, 0.033, 0.27, 0.95) +   ## x, y, width, height
draw_plot(grob, 0.275, 0.001, 0.52, 0.98) +
draw_plot(grid.grabExpr(draw(merged_legends)), 0.84, 0.4, 0.06, 0.08)
p
#| echo: true
#| warning: false
#| message: false
#| label: figured_sup
#| fig-width: 4
#| fig-height: 6
func_marks <- c("CD45", "CD45RO", "EGFR", "PD_L1", "LAG_3", "Vista", "CCR6", "Arginase_1", "PD1",
"Vimentin", "B7_H4", "Granzyme_B", "Ki67", "Caspase3")
heatmap_dat <- c_mat[grouping_celltype$cell_type_new, func_marks]
colnames(heatmap_dat) <- c("CD45", "CD45RO", "EGFR", "PD-L1", "LAG3", "VISTA", "CCR6", "Arg-1", "PD-1",
"Vim", "B7-H4", "GZMB", "Ki-67", "Casp-3")
ht_func <- Heatmap(heatmap_dat, name = "matrix", heatmap_legend_param = list(title = "exp"),
cluster_row_slices = F, col = col_fun, row_km = 0,
cluster_rows = F, show_heatmap_legend = T, #left_annotation = block_anno,
show_row_names = T,#split = split_row, row_title = NULL,
show_row_dend = F, show_column_dend = F)
pdf(glue::glue("{res_dir}/fig1dsup_heatmap_sup_functional.pdf"), height = 6, width = 5)
draw(ht_func)
d <- dev.off()
ht_func
#| echo: true
#| warning: false
#| message: false
#| label: figure1e
#| fig-width: 2
#| fig-height: 3
celltypes <- unique(coldat$cell_type_new)
cld <- coldat %>% group_by(stype3) %>% mutate(n_cell = n()) %>%
group_by(cell_type_new, .add = T) %>% mutate(cell_ratio = n()/n_cell)
df <- cld %>% ungroup() %>% dplyr::select(stype3, cell_type_new, cell_ratio) %>%
dplyr::distinct() %>% pivot_wider(names_from = cell_type_new, values_from = cell_ratio) %>%
mutate(across(where(is.numeric), replace_na, 0)) %>%
pivot_longer(celltypes, names_to = "cell_type", values_to = "ratio")
df$stype3<- factor(df$stype3, levels = c("Surgery_without_chemo", "Surgery_after_chemo", "Punc_pancreas", "Punc_liver", "Paracancerous", "Normal"))
stack <- function (df = df) {
p <- ggplot(df, mapping = aes(stype3, ratio*100, fill = cell_type)) +
geom_bar(stat = 'identity', position = position_stack(), width = 0.8) +
labs(x = '', y = 'Cell percentage') +
theme_bw() + scale_fill_manual(values = ctype10_cols) +
theme(axis.title = element_text(size = 13),
axis.text.x = element_text(angle = 60, hjust = 1),
axis.title.x = element_blank(),
axis.ticks.x =  element_blank(),
axis.text.y = element_text(color = "black"),
axis.ticks = element_line(size = 0.25),
strip.text = element_text(size = 8),
strip.background = element_rect(fill = NA, color = NA),
legend.position = "none") +
scale_y_continuous(expand = c(0,0))
return(p)
}
p <- stack(df = df)
ggsave(glue::glue("{res_dir}/fig1e_stype2_stackplot.pdf"), p, width = 2, height = 3, dpi = 300)
p
trace(fetch_reducedims, edit = T)
#| echo: true
#| warning: false
#| message: false
#| label: figure1f
#| fig-width: 5
#| fig-height: 2.5
# set.seed(2022)
# sce_sub <- jhuanglabHyperion::subset_hyp(sce, cell_number = 300000)
sce_sub <- read_rds(glue::glue("{dat_dir}/sce_sub_fig1f.rds"))
png(glue::glue("{res_dir}/fig1f_tsne_stype3_300000.png"), res = 300, width = 7, height = 5, units = 'in')
print(plot2d(sce_sub, color.by = "stype3", show.cluser.id = F, size = 0.01,
item.use = c("tSNE1", "tSNE2")) + scale_color_manual(values = stype3_color)) +
guides(colour = guide_legend(override.aes = list(size = 2)))
sce_sub
plot_meta <- fetch_reducedims(sce_sub, assay = assay, verbose = FALSE)
plot_meta <- fetch_reducedims(sce_sub, assay = "log2counts_censored", verbose = FALSE)
plot_meta
c("tSNE1", "tSNE2") %in% colnames(plot_meta)
colnames(plot_meta)
print(plot2d(sce_sub, color.by = "stype3", show.cluser.id = F, size = 0.01,
item.use = c("t_sne1", "t_sne2")) + scale_color_manual(values = stype3_color)) +
guides(colour = guide_legend(override.aes = list(size = 2)))
stype3_color
stype3_cols
print(plot2d(sce_sub, color.by = "stype3", show.cluser.id = F, size = 0.01,
item.use = c("t_sne1", "t_sne2")) + scale_color_manual(values = stype3_cols)) +
guides(colour = guide_legend(override.aes = list(size = 2)))
d <- dev.off()
p <- plot2d(sce_sub, color.by = "stype3", show.cluser.id = F, size = 0.01,
item.use = c("t_sne1", "t_sne2")) + scale_color_manual(values = stype3_cols) +
guides(colour = guide_legend(override.aes = list(size = 2)))
ggsave(glue::glue("{res_dir}/fig1f_tsne_stype3_300000.png"), p, dpi = 300, width = 7, height = 5)
print(p)
#| echo: true
#| warning: false
#| message: false
pkgs <- c("fs", "futile.logger", "configr", "stringr", "ggpubr", "ggthemes",
"SingleCellExperiment", "RColorBrewer", "vroom", "jhtools", "glue",
"jhuanglabHyperion", "openxlsx", "ggsci", "ggraph", "patchwork",
"cowplot", "tidyverse", "dplyr", "rstatix", "magrittr", "igraph",
"tidygraph", "ggtree", "aplot", "circlize")
for (pkg in pkgs){
suppressPackageStartupMessages(library(pkg, character.only = T))
}
suppressMessages(conflicted::conflict_scout())
res_dir <- "./results/figure2" %>% checkdir
dat_dir <- "./data" %>% checkdir
config_dir <- "./config" %>% checkdir
#colors config
config_fn <- glue::glue("{config_dir}/configs.yaml")
stype3_cols <- jhtools::show_me_the_colors(config_fn, "stype3")
ctype10_cols <- jhtools::show_me_the_colors(config_fn, "cell_type10")
#read in coldata
coldat <- readr::read_csv(glue::glue("{dat_dir}/sce_coldata.csv"))
#| echo: true
#| warning: false
#| message: false
#| label: figure1a
#| fig-width: 3
#| fig-height: 6
meta_clu <- readxl::read_excel(glue::glue("{dat_dir}/meta_clu.xlsx")) %>% dplyr::select(-9)
coldat
# calculate fraction data
col_frac <- coldat %>% group_by(community_cluster_names, cell_type_new) %>% dplyr::mutate(cell_clu_count = n()) %>%
group_by(community_cluster_names) %>% dplyr::mutate(all_count = n(), frac = cell_clu_count / all_count) %>%
group_by(cell_type_new) %>% dplyr::mutate(all_c_count = n(), frac2 = cell_clu_count / all_c_count)
col_frac_wide <- col_frac_s %>% select(-frac) %>%
pivot_wider(names_from = cell_type_new, values_from = frac2, values_fill = 0) %>%
as.data.frame() %>% column_to_rownames(var = "community_cluster_names") %>% as.matrix()
col_frac_s <- col_frac %>% select(community_cluster_names, cell_type_new, frac2, frac) %>%
na.omit() %>% unique() %>% as.data.frame()
col_frac_wide <- col_frac_s %>% select(-frac) %>%
pivot_wider(names_from = cell_type_new, values_from = frac2, values_fill = 0) %>%
as.data.frame() %>% column_to_rownames(var = "community_cluster_names") %>% as.matrix()
col_frac_wide <- col_frac_wide[, c(epiendo_cells, immu_stroma_cells)]
rownames(col_frac_wide) <- meta_clu$cluster_names[match(rownames(col_frac_wide), meta_clu$cluster_names)]
ht_mat <- scale(t(col_frac_wide))
# grouped scale
scale_this <- function(x){
(x - mean(x, na.rm=TRUE)) / sd(x, na.rm=TRUE)
}
plot_data <- col_frac_s %>%
group_by(community_cluster_names) %>% dplyr::mutate(frac2_scaled = scale_this(frac2)) %>%
group_by(cell_type_new) %>% dplyr::mutate(frac_scaled_byrow = scale_this(frac))
plot_data
plot_data <- left_join(plot_data, grouping_celltype) %>% ungroup() %>%
dplyr::filter(meta_celltype != "Others")
plot_data
plot_data <- left_join(plot_data %>% dplyr::rename("cluster_names" = "community_cluster_names"), meta_clu)
plot_data
meta_clu
plot_data <- col_frac_s %>%
group_by(community_cluster_names) %>% dplyr::mutate(frac2_scaled = scale_this(frac2)) %>%
group_by(cell_type_new) %>% dplyr::mutate(frac_scaled_byrow = scale_this(frac))
grouping_celltype
plot_data
plot_data <- left_join(plot_data, grouping_celltype) %>% ungroup() %>%
dplyr::filter(meta_celltype != "Others")
plot_data
plot_data$community_cluster_names %>% unique()
meta_clu$cluster_names %>% unique()
table(unique(plot_data$community_cluster_names) %in% unique(meta_clu$cluster_names))
unique(plot_data$community_cluster_names)[!unique(plot_data$community_cluster_names) %in% unique(meta_clu$cluster_names)]
plot_data <- left_join(plot_data, meta_clu, by = c("community_cluster_names" = "old_cluster_name"))
plot_data
#| echo: true
#| warning: false
#| message: false
#| label: figure2b
#| fig-width: 9
#| fig-height: 7
meta_clu <- readxl::read_excel(glue::glue("{dat_dir}/meta_clu.xlsx")) %>% dplyr::select(-9)
epiendo_cells <- c("Epithelial tumor cell", "Normal epithelial cell", "Endothelial cell")
immu_stroma_cells <- c("DC", "MDSC", "Monocyte", "B cell", "CD8+ T cell", "CD4+ T cell",
"HLA-DR-CD163- mp", "HLA-DR-CD163+ mp", "HLA-DR+CD163- mp",
"HLA-DR+CD163+ mp", "HLA-DR-CD163- MMT", "HLA-DR+CD163- MMT",
"HLA-DR+CD163+ MMT", "PSC", "myoCAF", "Col1+ CAF")
other_cells <- c("CCR6+ cell", "B7-H4+ cell", "Ki67+ cell", "Vim+ cell", "Unknown")
grouping_celltype <- data.frame(cell_type_new = c(epiendo_cells, immu_stroma_cells, other_cells),
meta_celltype = c(rep("Epi-endo", 3), rep("Immune-stroma", 16), rep("Others", 5)))
# calculate fraction data
col_frac <- coldat %>% group_by(community_cluster_names, cell_type_new) %>% dplyr::mutate(cell_clu_count = n()) %>%
group_by(community_cluster_names) %>% dplyr::mutate(all_count = n(), frac = cell_clu_count / all_count) %>%
group_by(cell_type_new) %>% dplyr::mutate(all_c_count = n(), frac2 = cell_clu_count / all_c_count)
col_frac_s <- col_frac %>% select(community_cluster_names, cell_type_new, frac2, frac) %>%
na.omit() %>% unique() %>% as.data.frame()
col_frac_wide <- col_frac_s %>% select(-frac) %>%
pivot_wider(names_from = cell_type_new, values_from = frac2, values_fill = 0) %>%
as.data.frame() %>% column_to_rownames(var = "community_cluster_names") %>% as.matrix()
col_frac_wide <- col_frac_wide[, c(epiendo_cells, immu_stroma_cells)]
rownames(col_frac_wide) <- meta_clu$cluster_names[match(rownames(col_frac_wide), meta_clu$cluster_names)]
ht_mat <- scale(t(col_frac_wide))
# grouped scale
scale_this <- function(x){
(x - mean(x, na.rm=TRUE)) / sd(x, na.rm=TRUE)
}
plot_data <- col_frac_s %>%
group_by(community_cluster_names) %>% dplyr::mutate(frac2_scaled = scale_this(frac2)) %>%
group_by(cell_type_new) %>% dplyr::mutate(frac_scaled_byrow = scale_this(frac))
plot_data <- left_join(plot_data, grouping_celltype) %>% ungroup() %>%
dplyr::filter(meta_celltype != "Others")
plot_data <- left_join(plot_data, meta_clu, by = c("community_cluster_names" = "old_cluster_name"))
# calculate dendrogram
clust <- hclust(dist(ht_mat))
v_clust <- hclust(dist(t(ht_mat)))
ddgram_col <- as.dendrogram(v_clust)
ggtree_plot_col <- ggtree(ddgram_col) + layout_dendrogram()
ddgram <- as.dendrogram(clust)
ggtree_plot <- ggtree::ggtree(ddgram)
# set colors and output location
col_fun1 = circlize::colorRamp2(c(-1, 0, 1, 2, 3), c("#5658A5", "#8BCDA3", "#FBF4AA", "#F16943", "#9D1A44"))
meta_colors <- c("Epi-endo" = "#B61932", "Immune-stroma" = "#568AC2", "Others" = "#BEA278")
ctype_colors <- data.frame(meta_colors, meta_celltype = names(meta_colors))
plot_data <- left_join(plot_data, ctype_colors, by = "meta_celltype")
# main plot
dotplot3 <- plot_data %>%
dplyr::mutate(`Enrichment\nin cell types` = frac2_scaled) %>%
dplyr::mutate(`Enrichment\nin clusters` = frac_scaled_byrow) %>%
dplyr::mutate(cell_type10 = factor(cell_type10, levels = clust$labels[clust$order]),
cluster = factor(cluster_names, levels = v_clust$labels[v_clust$order])) %>%
ggplot(aes(x=cluster, y = cell_type10, color = `Enrichment\nin clusters`, size = `Enrichment\nin cell types`)) +
geom_point() +
cowplot::theme_cowplot() +
theme(axis.line  = element_blank()) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
xlab('') +
ylab('') +
theme(axis.ticks = element_blank()) +
theme(plot.margin = unit(c(0, 0, 0, 0), "cm")) +
scale_color_gradientn(colours = col_fun1(seq(-1, 4, by = 0.2))) +
scale_y_discrete(position = "right")
#| echo: true
#| warning: false
#| message: false
#| label: figure2b
#| fig-width: 9
#| fig-height: 7
meta_clu <- readxl::read_excel(glue::glue("{dat_dir}/meta_clu.xlsx")) %>% dplyr::select(-9)
epiendo_cells <- c("Epithelial tumor cell", "Normal epithelial cell", "Endothelial cell")
immu_stroma_cells <- c("DC", "MDSC", "Monocyte", "B cell", "CD8+ T cell", "CD4+ T cell",
"HLA-DR-CD163- mp", "HLA-DR-CD163+ mp", "HLA-DR+CD163- mp",
"HLA-DR+CD163+ mp", "HLA-DR-CD163- MMT", "HLA-DR+CD163- MMT",
"HLA-DR+CD163+ MMT", "PSC", "myoCAF", "Col1+ CAF")
other_cells <- c("CCR6+ cell", "B7-H4+ cell", "Ki67+ cell", "Vim+ cell", "Unknown")
grouping_celltype <- data.frame(cell_type_new = c(epiendo_cells, immu_stroma_cells, other_cells),
meta_celltype = c(rep("Epi-endo", 3), rep("Immune-stroma", 16), rep("Others", 5)))
# calculate fraction data
col_frac <- coldat %>% group_by(community_cluster_names, cell_type_new) %>% dplyr::mutate(cell_clu_count = n()) %>%
group_by(community_cluster_names) %>% dplyr::mutate(all_count = n(), frac = cell_clu_count / all_count) %>%
group_by(cell_type_new) %>% dplyr::mutate(all_c_count = n(), frac2 = cell_clu_count / all_c_count)
col_frac_s <- col_frac %>% select(community_cluster_names, cell_type_new, frac2, frac) %>%
na.omit() %>% unique() %>% as.data.frame()
col_frac_wide <- col_frac_s %>% select(-frac) %>%
pivot_wider(names_from = cell_type_new, values_from = frac2, values_fill = 0) %>%
as.data.frame() %>% column_to_rownames(var = "community_cluster_names") %>% as.matrix()
col_frac_wide <- col_frac_wide[, c(epiendo_cells, immu_stroma_cells)]
rownames(col_frac_wide) <- meta_clu$cluster_names[match(rownames(col_frac_wide), meta_clu$cluster_names)]
ht_mat <- scale(t(col_frac_wide))
# grouped scale
scale_this <- function(x){
(x - mean(x, na.rm=TRUE)) / sd(x, na.rm=TRUE)
}
plot_data <- col_frac_s %>%
group_by(community_cluster_names) %>% dplyr::mutate(frac2_scaled = scale_this(frac2)) %>%
group_by(cell_type_new) %>% dplyr::mutate(frac_scaled_byrow = scale_this(frac))
plot_data <- left_join(plot_data, grouping_celltype) %>% ungroup() %>%
dplyr::filter(meta_celltype != "Others")
plot_data <- left_join(plot_data, meta_clu, by = c("community_cluster_names" = "old_cluster_name"))
# calculate dendrogram
clust <- hclust(dist(ht_mat))
v_clust <- hclust(dist(t(ht_mat)))
ddgram_col <- as.dendrogram(v_clust)
ggtree_plot_col <- ggtree(ddgram_col) + layout_dendrogram()
ddgram <- as.dendrogram(clust)
ggtree_plot <- ggtree::ggtree(ddgram)
# set colors and output location
col_fun1 = circlize::colorRamp2(c(-1, 0, 1, 2, 3), c("#5658A5", "#8BCDA3", "#FBF4AA", "#F16943", "#9D1A44"))
meta_colors <- c("Epi-endo" = "#B61932", "Immune-stroma" = "#568AC2", "Others" = "#BEA278")
ctype_colors <- data.frame(meta_colors, meta_celltype = names(meta_colors))
plot_data <- left_join(plot_data, ctype_colors, by = "meta_celltype")
# main plot
dotplot3 <- plot_data %>%
dplyr::mutate(`Enrichment\nin cell types` = frac2_scaled) %>%
dplyr::mutate(`Enrichment\nin clusters` = frac_scaled_byrow) %>%
dplyr::mutate(cell_type_new = factor(cell_type_new, levels = clust$labels[clust$order]),
cluster = factor(cluster_names, levels = v_clust$labels[v_clust$order])) %>%
ggplot(aes(x=cluster, y = cell_type_new, color = `Enrichment\nin clusters`, size = `Enrichment\nin cell types`)) +
geom_point() +
cowplot::theme_cowplot() +
theme(axis.line  = element_blank()) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
xlab('') +
ylab('') +
theme(axis.ticks = element_blank()) +
theme(plot.margin = unit(c(0, 0, 0, 0), "cm")) +
scale_color_gradientn(colours = col_fun1(seq(-1, 4, by = 0.2))) +
scale_y_discrete(position = "right")
# handy function to alter the legend
addSmallLegend <- function(myPlot, pointSize = 4, textSize = 8) {
myPlot +
guides(shape = guide_legend(override.aes = list(size = pointSize))) +
theme(legend.title = element_text(size = textSize),
legend.text  = element_text(size = textSize),
legend.position = c(1.1, -0.3), ## legend.justification does not work well
legend.direction = "horizontal")
}
dotplot3_s <- addSmallLegend(dotplot3)
# dendrograms
ggtree_plot <- ggtree_plot + ylim2(dotplot3)
ggtree_plot_col <- ggtree_plot_col + xlim2(dotplot3)
# row labels of cell metaclusters
labels <- ggplot(plot_data %>%
mutate(`Cell Categories` = meta_celltype,
cell_type_new = factor(cell_type_new, levels = clust$labels[clust$order])),
aes(y = cell_type_new, x = 3, fill = `Cell Categories`)) +
geom_tile() +
scale_fill_manual(values = meta_colors) +
ylim2(dotplot3)
# legend
legend <- plot_grid(ggpubr::get_legend(labels + theme(legend.position = "bottom")))
labels <- labels + theme_nothing() + theme(legend.position = "none")  +
theme(plot.margin = unit(c(0, 0, 0, 0), "cm"))
# merged plot
merged <- plot_spacer() + plot_spacer() + plot_spacer() + plot_spacer() + ggtree_plot_col +
plot_spacer() + plot_spacer() + plot_spacer() + plot_spacer() + plot_spacer() +
ggtree_plot + plot_spacer() + labels + plot_spacer() + dotplot3_s +
plot_spacer() + plot_spacer() + plot_spacer() + plot_spacer() + plot_spacer() +
plot_spacer() + plot_spacer() + plot_spacer() + plot_spacer() + legend +
plot_layout(ncol = 5, widths = c(0.7, -0.3, 0.2, -0.25, 4.2), heights = c(0.9, -0.4, 4, -0.5, 0.9))
ggsave(glue::glue("dotplot_main_fig2b.pdf"), merged, height = 7, width = 9)
merged
ctype_colors
plot_data
clust$labels[clust$order]
plot_data$cluster_names %>% unique
v_clust$labels[v_clust$order]
ht_mat[1:3,1:3]
colnames(ht_mat)
col_frac_wide
meta_clu
col_frac_wide <- col_frac_s %>% select(-frac) %>%
pivot_wider(names_from = cell_type_new, values_from = frac2, values_fill = 0) %>%
as.data.frame() %>% column_to_rownames(var = "community_cluster_names") %>% as.matrix()
col_frac_wide <- col_frac_wide[, c(epiendo_cells, immu_stroma_cells)]
col_frac_wide
meta_clu
meta_clu$cluster_names[match(rownames(col_frac_wide), meta_clu$old_cluster_name)]
rownames(col_frac_wide)
col_frac_wide <- col_frac_s %>% select(-frac) %>%
pivot_wider(names_from = cell_type_new, values_from = frac2, values_fill = 0) %>%
as.data.frame() %>% column_to_rownames(var = "community_cluster_names") %>% as.matrix()
col_frac_wide <- col_frac_wide[, c(epiendo_cells, immu_stroma_cells)]
rownames(col_frac_wide) <- meta_clu$cluster_names[match(rownames(col_frac_wide), meta_clu$old_cluster_name)]
ht_mat <- scale(t(col_frac_wide))
ht_mat[1:3,1:3]
#| echo: true
#| warning: false
#| message: false
#| label: figure2b
#| fig-width: 9
#| fig-height: 7
meta_clu <- readxl::read_excel(glue::glue("{dat_dir}/meta_clu.xlsx")) %>% dplyr::select(-9)
epiendo_cells <- c("Epithelial tumor cell", "Normal epithelial cell", "Endothelial cell")
immu_stroma_cells <- c("DC", "MDSC", "Monocyte", "B cell", "CD8+ T cell", "CD4+ T cell",
"HLA-DR-CD163- mp", "HLA-DR-CD163+ mp", "HLA-DR+CD163- mp",
"HLA-DR+CD163+ mp", "HLA-DR-CD163- MMT", "HLA-DR+CD163- MMT",
"HLA-DR+CD163+ MMT", "PSC", "myoCAF", "Col1+ CAF")
other_cells <- c("CCR6+ cell", "B7-H4+ cell", "Ki67+ cell", "Vim+ cell", "Unknown")
grouping_celltype <- data.frame(cell_type_new = c(epiendo_cells, immu_stroma_cells, other_cells),
meta_celltype = c(rep("Epi-endo", 3), rep("Immune-stroma", 16), rep("Others", 5)))
# calculate fraction data
col_frac <- coldat %>% group_by(community_cluster_names, cell_type_new) %>% dplyr::mutate(cell_clu_count = n()) %>%
group_by(community_cluster_names) %>% dplyr::mutate(all_count = n(), frac = cell_clu_count / all_count) %>%
group_by(cell_type_new) %>% dplyr::mutate(all_c_count = n(), frac2 = cell_clu_count / all_c_count)
col_frac_s <- col_frac %>% select(community_cluster_names, cell_type_new, frac2, frac) %>%
na.omit() %>% unique() %>% as.data.frame()
col_frac_wide <- col_frac_s %>% select(-frac) %>%
pivot_wider(names_from = cell_type_new, values_from = frac2, values_fill = 0) %>%
as.data.frame() %>% column_to_rownames(var = "community_cluster_names") %>% as.matrix()
col_frac_wide <- col_frac_wide[, c(epiendo_cells, immu_stroma_cells)]
rownames(col_frac_wide) <- meta_clu$cluster_names[match(rownames(col_frac_wide), meta_clu$old_cluster_name)]
ht_mat <- scale(t(col_frac_wide))
# grouped scale
scale_this <- function(x){
(x - mean(x, na.rm=TRUE)) / sd(x, na.rm=TRUE)
}
plot_data <- col_frac_s %>%
group_by(community_cluster_names) %>% dplyr::mutate(frac2_scaled = scale_this(frac2)) %>%
group_by(cell_type_new) %>% dplyr::mutate(frac_scaled_byrow = scale_this(frac))
plot_data <- left_join(plot_data, grouping_celltype) %>% ungroup() %>%
dplyr::filter(meta_celltype != "Others")
plot_data <- left_join(plot_data, meta_clu, by = c("community_cluster_names" = "old_cluster_name"))
# calculate dendrogram
clust <- hclust(dist(ht_mat))
v_clust <- hclust(dist(t(ht_mat)))
ddgram_col <- as.dendrogram(v_clust)
ggtree_plot_col <- ggtree(ddgram_col) + layout_dendrogram()
ddgram <- as.dendrogram(clust)
ggtree_plot <- ggtree::ggtree(ddgram)
# set colors and output location
col_fun1 = circlize::colorRamp2(c(-1, 0, 1, 2, 3), c("#5658A5", "#8BCDA3", "#FBF4AA", "#F16943", "#9D1A44"))
meta_colors <- c("Epi-endo" = "#B61932", "Immune-stroma" = "#568AC2", "Others" = "#BEA278")
ctype_colors <- data.frame(meta_colors, meta_celltype = names(meta_colors))
plot_data <- left_join(plot_data, ctype_colors, by = "meta_celltype")
# main plot
dotplot3 <- plot_data %>%
dplyr::mutate(`Enrichment\nin cell types` = frac2_scaled) %>%
dplyr::mutate(`Enrichment\nin clusters` = frac_scaled_byrow) %>%
dplyr::mutate(cell_type_new = factor(cell_type_new, levels = clust$labels[clust$order]),
cluster = factor(cluster_names, levels = v_clust$labels[v_clust$order])) %>%
ggplot(aes(x=cluster, y = cell_type_new, color = `Enrichment\nin clusters`, size = `Enrichment\nin cell types`)) +
geom_point() +
cowplot::theme_cowplot() +
theme(axis.line  = element_blank()) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
xlab('') +
ylab('') +
theme(axis.ticks = element_blank()) +
theme(plot.margin = unit(c(0, 0, 0, 0), "cm")) +
scale_color_gradientn(colours = col_fun1(seq(-1, 4, by = 0.2))) +
scale_y_discrete(position = "right")
# handy function to alter the legend
addSmallLegend <- function(myPlot, pointSize = 4, textSize = 8) {
myPlot +
guides(shape = guide_legend(override.aes = list(size = pointSize))) +
theme(legend.title = element_text(size = textSize),
legend.text  = element_text(size = textSize),
legend.position = c(1.1, -0.3), ## legend.justification does not work well
legend.direction = "horizontal")
}
dotplot3_s <- addSmallLegend(dotplot3)
# dendrograms
ggtree_plot <- ggtree_plot + ylim2(dotplot3)
ggtree_plot_col <- ggtree_plot_col + xlim2(dotplot3)
# row labels of cell metaclusters
labels <- ggplot(plot_data %>%
mutate(`Cell Categories` = meta_celltype,
cell_type_new = factor(cell_type_new, levels = clust$labels[clust$order])),
aes(y = cell_type_new, x = 3, fill = `Cell Categories`)) +
geom_tile() +
scale_fill_manual(values = meta_colors) +
ylim2(dotplot3)
# legend
legend <- plot_grid(ggpubr::get_legend(labels + theme(legend.position = "bottom")))
dev.off()
